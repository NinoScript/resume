{
  "name": "moment-interval",
  "description": "Time intervals for Moment.js",
  "author": {
    "name": "Luis Farzati",
    "email": "lfarzati@gmail.com"
  },
  "homepage": "https://github.com/luisfarzati/moment-interval",
  "bugs": {
    "url": "https://github.com/luisfarzati/moment-interval/issues"
  },
  "version": "0.2.0",
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "moment": "2.0.0"
  },
  "devDependencies": {
    "grunt": "latest",
    "nodeunit": "latest",
    "grunt-contrib-jshint": "latest",
    "grunt-contrib-nodeunit": "latest",
    "grunt-contrib-watch": "latest"
  },
  "scripts": {
    "test": "grunt"
  },
  "repository": {
    "type": "git",
    "url": "https://git@github.com/luisfarzati/moment-interval.git"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/luisfarzati/moment-interval/blob/master/LICENSE"
  },
  "readme": "moment-interval\r\n===============\r\nThis plugin provides time intervals for [Moment.js][moment]. It also adds support for [ISO 8601][iso8601] duration expressions.\r\n\r\n\r\nCreating a time interval\r\n------------------------\r\n\r\nA time interval is defined by a **start time**, an **end time**, and a **period** representing the amount of time between start and end.\r\n\r\nWhen creating a time interval you can specify the time window in _absolute_ terms, like **start** and **end** time, or using a combination of absolute and _relative_ values, like **start** and **period**, or **period** and **end**.\r\n\r\nSo, for example, you could create a time interval between _April 2013_ and _May 2013_. The period here would be of _1 month_. Or you could create a time interval starting at _May 1st, 2013_ and ending a _week later_. The end date would be _May 8th, 2013_.\r\n\r\nmoment-interval adds methods to the `moment` object, as well as `Moment` and `Duration` instances, to let you do this along some other common time handling tasks.\r\n\r\n### `Interval` moment.interval(String)\r\n\r\nCreates an Interval instance by specifying a string in the form of [ISO 8601 time interval expression][iso8601i]:\r\n\r\n`start-date or period/end-date or period`\r\n\r\nIf you leave a blank date at one of the sides, the current date will be used. You can't have both sides of the interval neither as blank or period.\r\n\r\n    // using dates in both ends\r\n    var fromMarchToApril = moment.interval('2013-03-01/2013-04-01');\r\n    \r\n    // using a start date and a period\r\n    var oneYearSinceApril2012 = moment.interval('2012-03-01/P1Y');\r\n\r\n    // using a period and an end date\r\n    var twentyEightDaysLater = moment.interval('/P28D')\r\n\r\n    // using a period and the current date\r\n    var oneHundredTwentySevenHoursBefore = moment.interval('P127H/')\r\n\r\n    // invalid usage\r\n    var voidTime = moment.interval('/');                // invalid!\r\n    var relativitySucks = moment.interval('P1D/PT8H');  // invalid!\r\n\r\n### `Interval` moment.interval(Moment, Duration)\r\n\r\nCreates an Interval instance starting at _Moment_ and ending at _Moment+Duration_.\r\n\r\n    // March 1st, 2013 to March 2nd, 2013\r\n    moment.interval(moment('2013-03-01'), moment.duration(1, 'day'));\r\n\r\n### `Interval` moment.interval(Duration, Moment)\r\n\r\nReturns an Interval instance starting at _Moment-Duration_ and ending at _Moment_.\r\n\r\n    // December 24th, 16:00 to December 25th, 00:00\r\n    moment.interval(moment.duration(8, 'hours'), moment('2013-12-25'));\r\n\r\n### `Interval` moment.interval(Moment, Moment)\r\n\r\nReturns an Interval instance starting at _Moment_ and ending at _Moment_.\r\n\r\n    // December 21st, 2012 to March 3rd, 2013\r\n    moment.interval(moment('2012-12-21'), moment('2013-03-21'));    \r\n\r\n### moment().interval(String)\r\n\r\nSimilar to `moment.interval(String)` but uses the current Moment instance as one end of the interval, so you just need to specify the other end.\r\n\r\n    // Now to Tomorrow same time\r\n    moment().interval('/P1D');\r\n    \r\n### `Interval` moment().interval(Moment)\r\n\r\nSimilar to `moment.interval(Moment, Moment)` but the current Moment instance is used as one end of the interval.\r\n\r\n    // January 2010 to June 2015\r\n    moment('2010-01').interval('2015-06');\r\n\r\n### `Interval` moment().interval(Duration)\r\n\r\nSimilar to `moment.interval(Moment, Duration)` or `moment.interval(Duration, Moment)` but the current Moment instance is used as one end of the interval.\r\n\r\n    // Sunday to Monday\r\n    moment().startOf('week').interval(moment.duration(-1, 'day'));\r\n    \r\n    // Monday to Tuesday\r\n    moment().startOf('week').interval(moment.duration(1, 'day'));\r\n    \r\n### `Interval` duration().since(Moment)\r\n\r\nCreates an Interval instance starting at _Moment_ and ending at _Moment+current Duration_.\r\n\r\n    // July 9th, 2011 to July 10th, 2011\r\n    moment.duration(1, 'day').since(moment('2011-07-09'));\r\n\r\n### `Interval` duration().until(Moment)\r\n\r\nCreates an Interval instance starting at _Moment+current Duration_ and ending at _Moment_.  \r\n\r\n    // July 9th, 2011 to July 10th, 2011\r\n    moment.duration(1, 'day').until(moment('2011-07-10'));\r\n\r\n\r\nAdjusting an interval\r\n----------------------\r\n\r\nmoment-interval uses overloaded getters and setters in the same way Moment.js does.  Calling these methods without parameters acts as a getter, and calling them with a parameter acts as a setter.\r\n\r\n### `Moment` start([moment, [keepPeriod = false]])\r\n\r\nSets or returns a Moment object representing the start time of the interval.\r\n\r\nBy default, setting a new start time will stretch or shrink the period and the end time will remain intact. \r\n\r\n    var selection = moment.interval('2010-06-01/2010-06-08');\r\n    selection.start();              // Moment object set at 2010-06-01\r\n    selection.period().humanize();  // \"7 days\" \r\n    \r\n    selection.start('2010-06-05');\r\n    selection.period().humanize();  // \"3 days\" \r\n    \r\nTo enforce the period and automatically adjust the end time according to the new start value, add the second argument keepPeriod as true.\r\n\r\n    selection.start('2010-06-01', true);\r\n    selection.end();                // Moment object set at 2010-06-04\r\n    \r\n### `Moment` end([Moment, [keepPeriod = false]])\r\n\r\nSame as above, but with the end time.\r\n\r\n### `Duration` period([Duration])\r\n\r\nSets or returns a Duration object representing the period of the interval. Setting a new period will shrink or stretch the interval keeping the start time intact.\r\n\r\n    // a week from today\r\n    var selection = moment.interval('/P1W');\r\n    selection.end();    // Moment object set as (today + 1 week)\r\n    \r\n    selection.period(moment.duration(2, 'weeks'));\r\n    selection.end();    // Moment object set as (today + 2 weeks)\r\n\r\n### `Interval` backward([Duration])\r\n\r\nMoves the interval backwards in time. You can either specify a period by passing a Duration object, or leave it blank and the interval will move backward by the current period.\r\n\r\n    var selection = moment.interval('P1W/2013-05-01');\r\n    \r\n    // previous week\r\n    selection.backward();   // 2013-04-17/2013-04-24\r\n    \r\n    // previous week\r\n    selection.backward();   // 2013-04-10/2013-04-17\r\n    \r\n    // previous year\r\n    selection.backward(moment.duration(1, 'year')); // 2012-04-10/2012-04-17\r\n\r\n### `Interval` forward([Duration])\r\n\r\nSame as above, but moves the interval forward in time.\r\n\r\n    // next month\r\n    selection.forward(moment.duration(1, 'month'))\r\n\r\n### `Interval` travel(Duration)\r\n\r\nSame as above but the Duration argument is mandatory. This is a generic method for moving backward or forward depending on the duration (if it is negative or positive).\r\n\r\n    // previous week\r\n    selection.travel(moment.duration(-1, 'week'));\r\n    \r\n    // next week\r\n    selection.travel(moment.duration(1, 'week'));\r\n\r\n\r\nHelper methods\r\n--------------\r\n\r\n### `boolean` moment.isInterval(Interval)\r\n\r\nChecks the specified object and returns true if it's a valid Interval instance, or false otherwise.\r\n\r\n### `Duration` moment.duration(String)\r\n\r\nmoment-interval extends Durations by adding [ISO 8601 duration expressions][iso8601d] support:\r\n\r\n`PnYnMnDTnHnMnSnZ` or `PnW`\r\n\r\nWhile `nZ` is not part of the ISO standard, it has been implemented here as a way to specify milliseconds and is completely optional.\r\n\r\n    moment.duration('P1W');         // a week\r\n    moment.duration('P1DT2H30M');   // a day and 2 and half hours\r\n    moment.duration('PT500Z');      // half a second\r\n\r\n### `String` duration().toISOString()\r\n\r\nReturns an ISO 8601 representation of the current Duration instance.\r\n\r\n    moment.duration(3, 'weeks').toISOString(); // \"P3W\"\r\n    moment.duration({days: 9, hours: 18}).toISOString(); // \"P9DT18H\"\r\n\r\n\r\nLicense\r\n=======\r\nmoment-interval is freely distributable under the terms of the MIT license.\r\n\r\n[moment]: http://momentjs.com/\r\n[iso8601]: http://en.wikipedia.org/wiki/ISO_8601\r\n[iso8601i]: http://en.wikipedia.org/wiki/ISO_8601#Time_intervals\r\n[iso8601d]: http://en.wikipedia.org/wiki/ISO_8601#Durations",
  "readmeFilename": "README.md",
  "_id": "moment-interval@0.2.0",
  "dist": {
    "shasum": "c2a6ab3ad22c149bf606b73c065ecbfd5c195ee5"
  },
  "_from": "moment-interval@",
  "_resolved": "https://registry.npmjs.org/moment-interval/-/moment-interval-0.2.0.tgz"
}
